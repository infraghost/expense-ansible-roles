  # - name: Install MySql Server
  #   ansible.builtin.dnf:
  #     name: mysql-server
  #     state: latest # Ensure the latest version is installed

  # - name: Start MySql Service
  #   ansible.builtin.systemd:
  #     name: mysqld
  #     state: started
  #     enabled: yes # Ensure the service starts on boot

  # - name: Ensure MySQL is running
  #   ansible.builtin.command: systemctl status mysqld
  #   register: mysql_status
  #   changed_when: false

  # - name: Print MySQL status
  #   ansible.builtin.debug:
  #     msg: "MySQL service is running: {{ mysql_status.stdout }}"

  # - name: Install python mysql dependencies
  #   ansible.builtin.pip:
  #     name:
  #       - PyMySQL
  #       - cryptography
  #     executable: pip3.9 # Use the specific Python executable if needed

  #   # Check if already mysql password is setup or not
  # - name: Check DB Connection
  #   community.mysql.mysql_info:
  #     login_user: root
  #     login_password: "{{ mysql_root_password }}"
  #     login_host: "{{ mysql_login_host }}"
  #     filter: version
  #   ignore_errors: yes
  #   register: mysql_db_connection_status

  # - name: Print Output of mysql_db_connection_status
  #   ansible.builtin.debug:
  #     msg: "MySQL connection output: {{ mysql_db_connection_status }}"

  # - name: Check DB connection
  #   community.mysql.mysql_info:
  #     login_user: "{{ login_user }}"
  #     login_password: "{{ mysql_root_password }}"
  #     login_host: "{{ mysql_login_host }}"
  #     filter: version
  #   ignore_errors: yes
  #   register: mysql_connection_output

  # - name: Print Output of mysql_connection_output
  #   ansible.builtin.debug:
  #     msg: "MySQL connection output: {{ mysql_connection_output }}"

  # - name: Import Data into MySQL
  #   community.mysql.mysql_db:
  #     name: all
  #     state: import
  #     target: /app/schema/backend.sql
  #     login_user: "{{ login_user }}"
  #     login_password: "{{ mysql_root_password }}"
  #     login_host: "{{ mysql_login_host }}"
  #   register: mysql_import_status
  #   when: mysql_connection_output.failed is not defined or mysql_connection_output.failed is false

  # - name: Print Output of Import Data into MySQL
  #   ansible.builtin.debug:
  #     msg: "MySQL connection output: {{ mysql_import_status }}"

  # # - name: Set MySQL root password if not set (initial setup)
  # #   community.mysql.mysql_user:
  # #     name: "{{ login_user }}"
  # #     host: "{{ mysql_login_host }}"
  # #     password: "{{ mysql_root_password }}"
  # #     login_unix_socket: /var/lib/mysql/mysql.sock
  # #   when: mysql_connection_output.failed | default(true)

  # # - name: Setup root Password
  # #   ansible.builtin.command: "mysql_secure_installation --set-root-pass {{ mysql_root_password }}"
  # #   when: mysql_connection_output.failed is true # don't give {{ }} in when condition

- name: Install MySQL Server
  ansible.builtin.dnf:
    name: mysql-server
    state: latest

- name: Start and Enable MySQL Service
  ansible.builtin.systemd:
    name: mysqld
    state: started
    enabled: yes

- name: Verify MySQL Service Status
  ansible.builtin.command: systemctl status mysqld
  register: mysql_service_status
  changed_when: false
  failed_when: mysql_service_status.rc != 0

- name: Print MySQL Service Status
  ansible.builtin.debug:
    msg: "MySQL service status: {{ mysql_service_status.stdout }}"

- name: Install Python MySQL Dependencies
  ansible.builtin.pip:
    name:
      - PyMySQL
      - cryptography
    executable: pip3.9

- name: Check if MySQL root password is set for 'root'@'localhost'
  community.mysql.mysql_info:
    login_user: root
    login_password: "{{ mysql_root_password }}"
    login_host: localhost
    filter: version
  ignore_errors: yes
  register: root_password_check_result_localhost

- name: Print result of 'root'@'localhost' password check
  ansible.builtin.debug:
    msg: "Root password check result (localhost): {{ root_password_check_result_localhost }}"

- name: Set MySQL root password for 'root'@'localhost' if not set
  community.mysql.mysql_user:
    name: root
    host: localhost
    password: "{{ mysql_root_password }}"
    login_unix_socket: /var/lib/mysql/mysql.sock # CRITICAL for initial setup
    state: present
    priv: "*.*:ALL,GRANT"
  when: root_password_check_result_localhost.failed is defined and root_password_check_result_localhost.failed

- name: Check if MySQL root user has remote access from Ansible controller's IP
  community.mysql.mysql_info:
    login_user: root
    login_password: "{{ mysql_root_password }}"
    login_host: "{{ mysql_login_host }}" # This will be the target host's IP (e.g., 3.81.137.229)
    filter: version
  ignore_errors: yes
  register: root_password_check_result_remote

- name: Print result of remote root access check
  ansible.builtin.debug:
    msg: "Root password check result (remote): {{ root_password_check_result_remote }}"

- name: Grant remote access to 'root'@'{{ ansible_host }}' if not already granted
  community.mysql.mysql_user:
    name: root
    host: "{{ ansible_host }}" # This will be the IP of your Ansible control machine
    password: "{{ mysql_root_password }}" # Password for the user you're creating/modifying
    priv: "*.*:ALL,GRANT"
    state: present
    # IMPORTANT: These are the login credentials for the module to connect to MySQL
    # Since this task is running on the target host, it connects locally.
    login_user: root
    login_password: "{{ mysql_root_password }}"
    login_unix_socket: /var/lib/mysql/mysql.sock # Use socket to connect as root locally
  when: root_password_check_result_remote.failed is defined and root_password_check_result_remote.failed

- name: Import Common Roles (assumes this role prepares /app/schema/backend.sql)
  ansible.builtin.import_role:
    name: common
    tasks_from: app-pre-req

- name: Import Data into MySQL
  community.mysql.mysql_db:
    name: all
    state: import
    target: /app/schema/backend.sql
    # IMPORTANT: These are the login credentials for the module to connect to MySQL
    # Ensure these are correct and can establish a connection
    login_user: root
    login_password: "{{ mysql_root_password }}"
    login_host: "{{ mysql_login_host }}" # Use the configured DB host for connection (e.g., 3.81.137.229)
    # If this task fails, consider adding login_unix_socket here as well
    # login_unix_socket: /var/lib/mysql/mysql.sock
  register: mysql_import_status

- name: Print Output of Import Data into MySQL
  ansible.builtin.debug:
    msg: "MySQL import status: {{ mysql_import_status }}"